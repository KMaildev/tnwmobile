{"remainingRequest":"/Applications/XAMPP/xamppfiles/htdocs/mobile/tnw/node_modules/vue-loader/lib/index.js??vue-loader-options!/Applications/XAMPP/xamppfiles/htdocs/mobile/tnw/src/views/Home.vue?vue&type=template&id=fae5bece&scoped=true&","dependencies":[{"path":"/Applications/XAMPP/xamppfiles/htdocs/mobile/tnw/src/views/Home.vue","mtime":1645949080761},{"path":"/Applications/XAMPP/xamppfiles/htdocs/mobile/tnw/node_modules/cache-loader/dist/cjs.js","mtime":1645262070880},{"path":"/Applications/XAMPP/xamppfiles/htdocs/mobile/tnw/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1645262074191},{"path":"/Applications/XAMPP/xamppfiles/htdocs/mobile/tnw/node_modules/cache-loader/dist/cjs.js","mtime":1645262070880},{"path":"/Applications/XAMPP/xamppfiles/htdocs/mobile/tnw/node_modules/vue-loader/lib/index.js","mtime":1645262073184}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}