{"remainingRequest":"/Applications/XAMPP/xamppfiles/htdocs/mobile/tnw/node_modules/vue-loader/lib/index.js??vue-loader-options!/Applications/XAMPP/xamppfiles/htdocs/mobile/tnw/src/views/SearchResult/SearchResult.vue?vue&type=template&id=33d3fda5&scoped=true&","dependencies":[{"path":"/Applications/XAMPP/xamppfiles/htdocs/mobile/tnw/src/views/SearchResult/SearchResult.vue","mtime":1645949152424},{"path":"/Applications/XAMPP/xamppfiles/htdocs/mobile/tnw/node_modules/cache-loader/dist/cjs.js","mtime":1645262070880},{"path":"/Applications/XAMPP/xamppfiles/htdocs/mobile/tnw/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1645262074191},{"path":"/Applications/XAMPP/xamppfiles/htdocs/mobile/tnw/node_modules/cache-loader/dist/cjs.js","mtime":1645262070880},{"path":"/Applications/XAMPP/xamppfiles/htdocs/mobile/tnw/node_modules/vue-loader/lib/index.js","mtime":1645262073184}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}